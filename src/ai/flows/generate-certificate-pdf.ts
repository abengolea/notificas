// This is an AI-powered code generated by Firebase Genkit, do not edit.
'use server';

/**
 * @fileOverview Generates a PDF certificate of the message for legal proof of message delivery and content.
 *
 * - generateCertificatePdf - A function that handles the certificate generation process.
 * - GenerateCertificatePdfInput - The input type for the generateCertificatePdf function.
 * - GenerateCertificatePdfOutput - The return type for the generateCertificatePdf function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const GenerateCertificatePdfInputSchema = z.object({
  mensajeId: z.string().describe('The ID of the message to generate a certificate for.'),
  remitenteNombre: z.string().describe('The name of the sender.'),
  remitenteEmail: z.string().describe('The email of the sender.'),
  destinatarioNombre: z.string().describe('The name of the recipient.'),
  destinatarioEmail: z.string().describe('The email of the recipient.'),
  timestamp: z.string().describe('The timestamp of the message.'),
  bfaEnviadoTimestamp: z.string().describe('The timestamp of when the message was sent, certified by BFA.'),
  bfaEnviadoHashRegistrado: z.string().describe('The hash registered when the message was sent, certified by BFA.'),
  bfaEnviadoStampId: z.string().describe('The stamp ID of when the message was sent, certified by BFA.'),
  bfaEnviadoVerificacionUrl: z.string().describe('The verification URL of when the message was sent, certified by BFA.'),
  bfaLeidoTimestamp: z.string().optional().describe('The timestamp of when the message was read, certified by BFA.'),
  bfaLeidoHashRegistrado: z.string().optional().describe('The hash registered when the message was read, certified by BFA.'),
  bfaLeidoStampId: z.string().optional().describe('The stamp ID of when the message was read, certified by BFA.'),
  bfaLeidoIpLector: z.string().optional().describe('The IP address of the reader when the message was read, certified by BFA.'),
  bfaLeidoDispositivoLector: z.string().optional().describe('The device of the reader when the message was read, certified by BFA.'),
  bfaLeidoVerificacionUrl: z.string().optional().describe('The verification URL of when the message was read, certified by BFA.'),
  contenido: z.string().describe('The content of the message.'),
  hashSHA256: z.string().describe('The SHA-256 hash of the message content.'),
});
export type GenerateCertificatePdfInput = z.infer<typeof GenerateCertificatePdfInputSchema>;

const GenerateCertificatePdfOutputSchema = z.object({
  certificatePdf: z.string().describe('The generated PDF certificate as a base64 encoded string.'),
});
export type GenerateCertificatePdfOutput = z.infer<typeof GenerateCertificatePdfOutputSchema>;

export async function generateCertificatePdf(input: GenerateCertificatePdfInput): Promise<GenerateCertificatePdfOutput> {
  return generateCertificatePdfFlow(input);
}

const prompt = ai.definePrompt({
  name: 'generateCertificatePdfPrompt',
  input: {schema: GenerateCertificatePdfInputSchema},
  output: {schema: GenerateCertificatePdfOutputSchema},
  prompt: `You are an expert in generating legal documents, specifically PDF certificates for messages sent through a secure messaging platform.

  Given the following information about a message, generate a PDF certificate as a base64 encoded string that provides irrefutable proof of the message's delivery and content. The certificate should include details about the sender, recipient, timestamps, and Blockchain Federal Argentina (BFA) certification statuses.

  The certificate MUST include the following sections:
  1.  Header: CERTIFICATE OF MESSAGING BLOCKCHAIN FEDERAL ARGENTINA
  2.  Message ID: {{{mensajeId}}}
  3.  Date of issue: Current date and time in ISO format
  4.  Sender Information:
      *   Name: {{{remitenteNombre}}}
      *   Email: {{{remitenteEmail}}}
      *   Verification Status: Verified
  5.  Recipient Information:
      *   Name: {{{destinatarioNombre}}}
      *   Email: {{{destinatarioEmail}}}
      *   Verification Status: Verified
  6.  Certified Traceability:
      *   Sent: {{{bfaEnviadoTimestamp}}}
          *   BFA Hash: {{{bfaEnviadoHashRegistrado}}}
          *   Stamp ID: {{{bfaEnviadoStampId}}}
          *   Verify: {{{bfaEnviadoVerificacionUrl}}}
      *   Read: IF the message has been read, include the following:
          *   Read: {{{bfaLeidoTimestamp}}}
              *   BFA Hash: {{{bfaLeidoHashRegistrado}}}
              *   Stamp ID: {{{bfaLeidoStampId}}}
              *   IP: {{{bfaLeidoIpLector}}}
              *   Device: {{{bfaLeidoDispositivoLector}}}
              *   Verify: {{{bfaLeidoVerificacionUrl}}}
          *   Otherwise, indicate PENDING READ
  7.  Original Content (SHA-256 Hash): {{{hashSHA256}}}
  8.  Independent Verification: All records are independently verifiable at https://bfa.ar/verify
  9.  Disclaimer: This certificate is valid and auditable in any court. Backed by Blockchain Federal Argentina.

  Ensure the generated output is a base64 encoded PDF.
  Consider using a library to construct the PDF and then encode it.

  Output the PDF certificate as a base64 encoded string:
  {
    "certificatePdf": "...base64 encoded PDF..."
  }

Message Details:
Message ID: {{{mensajeId}}}
Sender Name: {{{remitenteNombre}}}
Sender Email: {{{remitenteEmail}}}
Recipient Name: {{{destinatarioNombre}}}
Recipient Email: {{{destinatarioEmail}}}
Timestamp: {{{timestamp}}}
BFA Sent Timestamp: {{{bfaEnviadoTimestamp}}}
BFA Sent Hash: {{{bfaEnviadoHashRegistrado}}}
BFA Sent Stamp ID: {{{bfaEnviadoStampId}}}
BFA Sent Verification URL: {{{bfaEnviadoVerificacionUrl}}}
BFA Read Timestamp: {{{bfaLeidoTimestamp}}}
BFA Read Hash: {{{bfaLeidoHashRegistrado}}}
BFA Read Stamp ID: {{{bfaLeidoStampId}}}
BFA Read IP: {{{bfaLeidoIpLector}}}
BFA Read Device: {{{bfaLeidoDispositivoLector}}}
BFA Read Verification URL: {{{bfaLeidoVerificacionUrl}}}
Content: {{{contenido}}}
SHA-256 Hash: {{{hashSHA256}}}
`
});

const generateCertificatePdfFlow = ai.defineFlow(
  {
    name: 'generateCertificatePdfFlow',
    inputSchema: GenerateCertificatePdfInputSchema,
    outputSchema: GenerateCertificatePdfOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
