// This is an AI-powered code generated by Firebase Genkit, do not edit.
'use server';

/**
 * @fileOverview Generates a PDF certificate of the message for legal proof of message delivery and content.
 *
 * - generateCertificatePdf - A function that handles the certificate generation process.
 * - GenerateCertificatePdfInput - The input type for the generateCertificatePdf function.
 * - GenerateCertificatePdfOutput - The return type for the generateCertificatePdf function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const GenerateCertificatePdfInputSchema = z.object({
  mensajeId: z.string().describe('The ID of the message to generate a certificate for.'),
  remitenteNombre: z.string().describe('The name of the sender.'),
  remitenteEmail: z.string().describe('The email of the sender.'),
  destinatarioNombre: z.string().describe('The name of the recipient.'),
  destinatarioEmail: z.string().describe('The email of the recipient.'),
  timestamp: z.string().describe('The timestamp of the message.'),
  bfaEnviadoTimestamp: z.string().describe('The timestamp of when the message was sent, certified by BFA.'),
  bfaEnviadoHashRegistrado: z.string().describe('The hash registered when the message was sent, certified by BFA.'),
  bfaEnviadoStampId: z.string().describe('The stamp ID of when the message was sent, certified by BFA.'),
  bfaEnviadoVerificacionUrl: z.string().describe('The verification URL of when the message was sent, certified by BFA.'),
  bfaLeidoTimestamp: z.string().optional().describe('The timestamp of when the message was read, certified by BFA.'),
  bfaLeidoHashRegistrado: z.string().optional().describe('The hash registered when the message was read, certified by BFA.'),
  bfaLeidoStampId: z.string().optional().describe('The stamp ID of when the message was read, certified by BFA.'),
  bfaLeidoIpLector: z.string().optional().describe('The IP address of the reader when the message was read, certified by BFA.'),
  bfaLeidoDispositivoLector: z.string().optional().describe('The device of the reader when the message was read, certified by BFA.'),
  bfaLeidoVerificacionUrl: z.string().optional().describe('The verification URL of when the message was read, certified by BFA.'),
  contenido: z.string().describe('The content of the message.'),
  hashSHA256: z.string().describe('The SHA-256 hash of the message content.'),
});
export type GenerateCertificatePdfInput = z.infer<typeof GenerateCertificatePdfInputSchema>;

const GenerateCertificatePdfOutputSchema = z.object({
  certificatePdf: z.string().describe('El certificado PDF generado como una cadena codificada en base64.'),
});
export type GenerateCertificatePdfOutput = z.infer<typeof GenerateCertificatePdfOutputSchema>;

export async function generateCertificatePdf(input: GenerateCertificatePdfInput): Promise<GenerateCertificatePdfOutput> {
  return generateCertificatePdfFlow(input);
}

const prompt = ai.definePrompt({
  name: 'generateCertificatePdfPrompt',
  input: {schema: GenerateCertificatePdfInputSchema},
  output: {schema: GenerateCertificatePdfOutputSchema},
  prompt: `Eres un experto en generar documentos legales, específicamente certificados PDF para mensajes enviados a través de una plataforma de mensajería segura.

  Dada la siguiente información sobre un mensaje, genera un certificado PDF como una cadena codificada en base64 que proporcione una prueba irrefutable de la entrega y el contenido del mensaje. El certificado debe incluir detalles sobre el remitente, el destinatario, las marcas de tiempo y los estados de certificación de Blockchain Federal Argentina (BFA).

  El certificado DEBE incluir las siguientes secciones:
  1.  Encabezado: CERTIFICADO DE MENSAJERÍA BLOCKCHAIN FEDERAL ARGENTINA
  2.  ID del Mensaje: {{{mensajeId}}}
  3.  Fecha de emisión: Fecha y hora actual en formato ISO
  4.  Información del Remitente:
      *   Nombre: {{{remitenteNombre}}}
      *   Email: {{{remitenteEmail}}}
      *   Estado de Verificación: Verificado
  5.  Información del Destinatario:
      *   Nombre: {{{destinatarioNombre}}}
      *   Email: {{{destinatarioEmail}}}
      *   Estado de Verificación: Verificado
  6.  Trazabilidad Certificada:
      *   Enviado: {{{bfaEnviadoTimestamp}}}
          *   Hash BFA: {{{bfaEnviadoHashRegistrado}}}
          *   Stamp ID: {{{bfaEnviadoStampId}}}
          *   Verificar: {{{bfaEnviadoVerificacionUrl}}}
      *   Leído: SI el mensaje ha sido leído, incluye lo siguiente:
          *   Leído: {{{bfaLeidoTimestamp}}}
              *   Hash BFA: {{{bfaLeidoHashRegistrado}}}
              *   Stamp ID: {{{bfaLeidoStampId}}}
              *   IP: {{{bfaLeidoIpLector}}}
              *   Dispositivo: {{{bfaLeidoDispositivoLector}}}
              *   Verificar: {{{bfaLeidoVerificacionUrl}}}
          *   En caso contrario, indicar LECTURA PENDIENTE
  7.  Contenido Original (Hash SHA-256): {{{hashSHA256}}}
  8.  Verificación Independiente: Todos los registros son verificables de forma independiente en https://bfa.ar/verify
  9.  Descargo de responsabilidad: Este certificado es válido y auditable en cualquier tribunal. Respaldado por Blockchain Federal Argentina.

  Asegúrate de que la salida generada sea un PDF codificado en base64.
  Considera usar una librería para construir el PDF y luego codificarlo.

  Genera el certificado PDF como una cadena codificada en base64:
  {
    "certificatePdf": "...PDF codificado en base64..."
  }

Detalles del Mensaje:
ID del Mensaje: {{{mensajeId}}}
Nombre del Remitente: {{{remitenteNombre}}}
Email del Remitente: {{{remitenteEmail}}}
Nombre del Destinatario: {{{destinatarioNombre}}}
Email del Destinatario: {{{destinatarioEmail}}}
Timestamp: {{{timestamp}}}
Timestamp de Envío BFA: {{{bfaEnviadoTimestamp}}}
Hash de Envío BFA: {{{bfaEnviadoHashRegistrado}}}
Stamp ID de Envío BFA: {{{bfaEnviadoStampId}}}
URL de Verificación de Envío BFA: {{{bfaEnviadoVerificacionUrl}}}
Timestamp de Lectura BFA: {{{bfaLeidoTimestamp}}}
Hash de Lectura BFA: {{{bfaLeidoHashRegistrado}}}
Stamp ID de Lectura BFA: {{{bfaLeidoStampId}}}
IP de Lectura BFA: {{{bfaLeidoIpLector}}}
Dispositivo de Lectura BFA: {{{bfaLeidoDispositivoLector}}}
URL de Verificación de Lectura BFA: {{{bfaLeidoVerificacionUrl}}}
Contenido: {{{contenido}}}
Hash SHA-256: {{{hashSHA256}}}
`
});

const generateCertificatePdfFlow = ai.defineFlow(
  {
    name: 'generateCertificatePdfFlow',
    inputSchema: GenerateCertificatePdfInputSchema,
    outputSchema: GenerateCertificatePdfOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);

    